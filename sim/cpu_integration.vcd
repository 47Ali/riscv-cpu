$date
	Mon Jun  9 16:10:30 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module cpu_integration_tb $end
$var reg 1 ! clk $end
$var reg 1 " reset $end
$var integer 32 # fail_count [31:0] $end
$var integer 32 $ pass_count [31:0] $end
$var integer 32 % test_count [31:0] $end
$scope module uut $end
$var wire 1 ! clk $end
$var wire 1 " reset $end
$var wire 1 & zero $end
$var wire 5 ' rs2 [4:0] $end
$var wire 5 ( rs1 [4:0] $end
$var wire 5 ) rd [4:0] $end
$var wire 32 * pc_out [31:0] $end
$var wire 7 + opcode [6:0] $end
$var wire 32 , instr [31:0] $end
$var wire 32 - imm_i [31:0] $end
$var wire 7 . funct7 [6:0] $end
$var wire 3 / funct3 [2:0] $end
$var wire 32 0 alu_result [31:0] $end
$var wire 1 1 RegWrite $end
$var wire 1 2 MemWrite $end
$var wire 1 3 MemRead $end
$var wire 1 4 Jump $end
$var wire 1 5 Branch $end
$var wire 1 6 ALUSrc $end
$var wire 2 7 ALUOp [1:0] $end
$scope module cu $end
$var wire 3 8 funct3 [2:0] $end
$var wire 7 9 funct7 [6:0] $end
$var wire 7 : opcode [6:0] $end
$var reg 2 ; ALUOp [1:0] $end
$var reg 1 6 ALUSrc $end
$var reg 1 5 Branch $end
$var reg 1 4 Jump $end
$var reg 1 3 MemRead $end
$var reg 1 2 MemWrite $end
$var reg 1 1 RegWrite $end
$upscope $end
$scope module exec_unit $end
$var wire 2 < alu_op [1:0] $end
$var wire 1 6 alu_src $end
$var wire 1 ! clk $end
$var wire 3 = funct3 [2:0] $end
$var wire 1 > funct7_5 $end
$var wire 5 ? rd [4:0] $end
$var wire 5 @ rs1 [4:0] $end
$var wire 5 A rs2 [4:0] $end
$var wire 1 1 we $end
$var wire 1 & zero $end
$var wire 32 B rd2 [31:0] $end
$var wire 32 C rd1 [31:0] $end
$var wire 32 D op2 [31:0] $end
$var wire 32 E instr [31:0] $end
$var wire 32 F imm [31:0] $end
$var wire 32 G alu_result [31:0] $end
$var wire 4 H alu_control [3:0] $end
$scope module alu_core $end
$var wire 32 I b [31:0] $end
$var wire 1 & zero $end
$var wire 4 J alu_control [3:0] $end
$var wire 32 K a [31:0] $end
$var reg 32 L result [31:0] $end
$upscope $end
$scope module alu_ctl $end
$var wire 2 M ALUOp [1:0] $end
$var wire 3 N funct3 [2:0] $end
$var wire 1 > funct7_5 $end
$var reg 4 O alu_control [3:0] $end
$upscope $end
$scope module imm_generator $end
$var wire 32 P instr [31:0] $end
$var reg 32 Q imm_out [31:0] $end
$upscope $end
$scope module rf $end
$var wire 1 ! clk $end
$var wire 5 R rd [4:0] $end
$var wire 5 S rs1 [4:0] $end
$var wire 5 T rs2 [4:0] $end
$var wire 32 U wd [31:0] $end
$var wire 1 1 we $end
$var wire 32 V rd2 [31:0] $end
$var wire 32 W rd1 [31:0] $end
$upscope $end
$upscope $end
$scope module fetch_unit $end
$var wire 1 X branch $end
$var wire 1 Y branch_taken $end
$var wire 32 Z branch_target [31:0] $end
$var wire 1 ! clk $end
$var wire 1 [ jal $end
$var wire 1 \ jalr $end
$var wire 32 ] jalr_target [31:0] $end
$var wire 32 ^ next_pc [31:0] $end
$var wire 1 " reset $end
$var wire 32 _ pc_plus4 [31:0] $end
$var wire 32 ` pc_out [31:0] $end
$var wire 32 a instr [31:0] $end
$scope module imem $end
$var wire 32 b instr [31:0] $end
$var wire 32 c addr [31:0] $end
$upscope $end
$scope module pc_inst $end
$var wire 1 ! clk $end
$var wire 32 d next_pc [31:0] $end
$var wire 1 " reset $end
$var reg 32 e pc_out [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
b0 e
b100 d
b0 c
b10011 b
b10011 a
b0 `
b100 _
b100 ^
b0 ]
0\
0[
b0 Z
0Y
0X
b0 W
b0 V
b0 U
b0 T
b0 S
b0 R
b0 Q
b10011 P
b10 O
b0 N
b11 M
b0 L
b0 K
b10 J
b0 I
b10 H
b0 G
b0 F
b10011 E
b0 D
b0 C
b0 B
b0 A
b0 @
b0 ?
0>
b0 =
b11 <
b11 ;
b10011 :
b0 9
b0 8
b11 7
16
05
04
03
02
11
b0 0
b0 /
b0 .
b0 -
b10011 ,
b10011 +
b0 *
b0 )
b0 (
b0 '
1&
b0 %
b0 $
b0 #
1"
0!
$end
#5000
1!
#10000
0!
#15000
0"
b1 $
b1 %
1!
#20000
0!
#25000
0&
b1 0
b1 G
b1 L
b1 U
bx B
bx V
b1 D
b1 I
b1 -
b1 '
b1 A
b1 T
b1 )
b1 ?
b1 R
b1 F
b1 Q
b100000000000010010011 ,
b100000000000010010011 E
b100000000000010010011 P
b100000000000010010011 a
b100000000000010010011 b
b1000 ^
b1000 d
b1000 _
b100 *
b100 `
b100 c
b100 e
1!
#30000
0!
#35000
b11 0
b11 G
b11 L
b11 U
b1 C
b1 K
b1 W
b10 D
b10 I
b10 -
b10 '
b10 A
b10 T
b1 (
b1 @
b1 S
b10 )
b10 ?
b10 R
b10 F
b10 Q
bx B
bx V
b1000001000000100010011 ,
b1000001000000100010011 E
b1000001000000100010011 P
b1000001000000100010011 a
b1000001000000100010011 b
b1100 ^
b1100 d
b1100 _
b1000 *
b1000 `
b1000 c
b1000 e
b10 $
b10 %
1!
#40000
0!
#45000
b110 0
b110 G
b110 L
b110 U
b11 C
b11 K
b11 W
b11 D
b11 I
b11 -
b11 '
b11 A
b11 T
b10 (
b10 @
b10 S
b11 )
b11 ?
b11 R
b11 F
b11 Q
bx B
bx V
b1100010000000110010011 ,
b1100010000000110010011 E
b1100010000000110010011 P
b1100010000000110010011 a
b1100010000000110010011 b
b10000 ^
b10000 d
b10000 _
b1100 *
b1100 `
b1100 c
b1100 e
1!
#50000
0!
#55000
1&
b0 0
b0 G
b0 L
b0 U
b0 C
b0 K
b0 W
14
06
11
b0 7
b0 ;
b0 <
b0 M
b0 D
b0 I
b0 -
b0 '
b0 A
b0 T
b0 (
b0 @
b0 S
b0 )
b0 ?
b0 R
b1101111 +
b1101111 :
b0 F
b0 Q
b0 B
b0 V
b1101111 ,
b1101111 E
b1101111 P
b1101111 a
b1101111 b
b10100 ^
b10100 d
b10100 _
b10000 *
b10000 `
b10000 c
b10000 e
b1 #
b11 %
1!
#60000
0!
#65000
bx D
bx I
x&
bx 0
bx G
bx L
bx U
bx B
bx V
bx C
bx K
bx W
x>
04
01
bx -
bx '
bx A
bx T
bx (
bx @
bx S
bx )
bx ?
bx R
bx .
bx 9
bx /
bx 8
bx =
bx N
bx +
bx :
bx ,
bx E
bx P
bx a
bx b
b11000 ^
b11000 d
b11000 _
b10100 *
b10100 `
b10100 c
b10100 e
b11 $
b100 %
1!
#70000
0!
#75000
b11100 ^
b11100 d
b11100 _
b11000 *
b11000 `
b11000 c
b11000 e
1!
#80000
0!
#85000
b100000 ^
b100000 d
b100000 _
b11100 *
b11100 `
b11100 c
b11100 e
b10 #
b101 %
1!
#90000
0!
#95000
b100100 ^
b100100 d
b100100 _
b100000 *
b100000 `
b100000 c
b100000 e
b100 $
b110 %
1!
#100000
0!
#105000
b101000 ^
b101000 d
b101000 _
b100100 *
b100100 `
b100100 c
b100100 e
1!
#110000
0!
#115000
b101100 ^
b101100 d
b101100 _
b101000 *
b101000 `
b101000 c
b101000 e
b11 #
b111 %
1!
#120000
0!
#125000
b110000 ^
b110000 d
b110000 _
b101100 *
b101100 `
b101100 c
b101100 e
b101 $
b1000 %
1!
#130000
0!
#135000
b110100 ^
b110100 d
b110100 _
b110000 *
b110000 `
b110000 c
b110000 e
1!
#140000
0!
#145000
b111000 ^
b111000 d
b111000 _
b110100 *
b110100 `
b110100 c
b110100 e
1!
